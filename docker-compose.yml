name: empioner
services:
  redis:
    image: redis:7.4.0-alpine
    container_name: redis
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USER=${REDIS_USER}
      - REDIS_USER_PASSWORD=${REDIS_USER_PASSWORD}
    ports:
      - "6379:6379"
    command: >
      sh -c '
        mkdir -p /usr/local/etc/redis &&
        echo "bind 0.0.0.0" > /usr/local/etc/redis/redis.conf &&
        echo "requirepass $REDIS_PASSWORD" >> /usr/local/etc/redis/redis.conf &&
        echo "appendonly yes" >> /usr/local/etc/redis/redis.conf &&
        echo "appendfsync everysec" >> /usr/local/etc/redis/redis.conf &&
        echo "user default off" > /usr/local/etc/redis/users.acl &&
        echo "user $REDIS_USER on >$REDIS_USER_PASSWORD ~* +@all" >> /usr/local/etc/redis/users.acl &&
        redis-server /usr/local/etc/redis/redis.conf --aclfile /usr/local/etc/redis/users.acl
      '
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "$REDIS_PASSWORD", "ping" ]
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - redis_data:/data
    networks:
      - observability-net

  mongo:
    image: mongo:7.0
    container_name: mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh mongo:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    volumes:
      - mongo_data_db:/data/db
      - mongo_data_configdb:/data/configdb
    networks:
      - observability-net

  postgres:
    image: postgres:17-alpine
    container_name: postgres
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "${POSTGRES_DB}" ]
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - observability-net

  bot:
    image: qwonix/empioner-telegram-bot:latest
    container_name: bot
    restart: unless-stopped
    depends_on:
      - service
      - redis
    environment:
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_USERNAME=${REDIS_USER}
      - SPRING_DATA_REDIS_PASSWORD=${REDIS_PASSWORD}
      - BOT_TITLE=${BOT_TITLE}
      - BOT_DESCRIPTION=${BOT_DESCRIPTION}
      - BOT_USERNAME=${BOT_USERNAME}
      - BOT_TOKEN=${BOT_TOKEN}
      - BOT_CONFIG_IMAGE_PLACEHOLDER=${BOT_CONFIG_IMAGE_PLACEHOLDER}
      - BOT_CONFIG_SHOW_SHOW_IMAGE_ID=${BOT_CONFIG_SHOW_SHOW_IMAGE_ID}
      - BOT_CONFIG_SHOW_SERIES_IMAGE_ID=${BOT_CONFIG_SHOW_SERIES_IMAGE_ID}
      - BOT_CONFIG_SHOW_SPECIAL_IMAGE_ID=${BOT_CONFIG_SHOW_SPECIAL_IMAGE_ID}
      - BOT_CONFIG_SHOW_MOVIE_IMAGE_ID=${BOT_CONFIG_SHOW_MOVIE_IMAGE_ID}
      - EMPIONER_SERVICE_URL=http://service:8080/graphql
      - BOT_SINGLE_SHOW_MODE_SHOW_ID=${BOT_SINGLE_SHOW_MODE_SHOW_ID}
    networks:
      - observability-net

  service:
    image: qwonix/empioner-telegram-service:latest
    container_name: service
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - postgres
      - mongo
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_DATA_MONGODB_HOST=mongo
      - SPRING_DATA_MONGODB_USERNAME=${MONGODB_USER}
      - SPRING_DATA_MONGODB_PASSWORD=${MONGODB_PASSWORD}
      - SPRING_DATA_MONGODB_AUTHENTICATION_DATABASE=${MONGODB_AUTHENTICATION_DATABASE}
    networks:
      - observability-net

  prometheus:
    image: prom/prometheus:v3.6.0
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9090/-/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  loki:
    image: grafana/loki:3.5.5
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/loki-config.yaml
    user: "root"
    volumes:
      - ./monitoring/loki/loki-config.yaml:/etc/loki/loki-config.yaml:ro
      - loki_chunks:/tmp/loki/chunks
      - loki_index:/tmp/loki/index
      - loki_rules:/tmp/loki/rules
    networks:
      - observability-net

  alloy:
    image: grafana/alloy:v1.11.0
    container_name: alloy
    user: root
    ports:
      - "9080:9080"
    volumes:
      - ./monitoring/alloy/config.alloy:/etc/alloy/config.alloy:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/log:/var/log:ro
    environment:
      GRAFANA_LOKI_URL: http://loki:3100/loki/api/v1/push
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:9080
      - --storage.path=/var/lib/alloy/data
      - /etc/alloy/config.alloy
    networks:
      - observability-net

  grafana:
    image: grafana/grafana:12.1.0
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=redis-datasource,grafana-mongodb-datasource
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - observability-net
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./monitoring/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:3000/api/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:v0.18.0
    container_name: postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - observability-net
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://localhost:9187/metrics" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-exporter:
    image: percona/mongodb_exporter:0.44
    container_name: mongo-exporter
    restart: unless-stopped
    ports:
      - "9216:9216"
    environment:
      MONGODB_URI: "mongodb://${MONGODB_USER}:${MONGODB_PASSWORD}@mongo:27017/admin?authSource=admin"
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - observability-net

  redis-exporter:
    image: oliver006/redis_exporter:v1.78.0
    container_name: redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - observability-net

networks:
  observability-net:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  mongo_data_db:
  mongo_data_configdb:
  grafana-storage:
  loki_data:
  loki_chunks:
  loki_index:
  loki_rules: